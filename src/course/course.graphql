type Course {
  id: ID!
  created_at: Date!
  updated_at: Date
  code: String!
  name: String!
  description: String!
  overview: String!
  creditHour: Int!
  users: [User] @deprecated(reason: "Use `teachers` or `students` or `owner`")
  teachers: [User]
  students: [User]
  owner: User
  takingClasses: [StudentClass]
  chapters: [Chapter]!
  courseDocuments: [CourseDocument]!
  assignmentDefinitions: [AssignmentDefinition]
  owningDepartment: Department
}

input CreateCourseInput {
  code: String!
  name: String!
  description: String!
  overview: String!
  creditHour: Int!
  departmentId: ID!
}

input UpdateCourseInput {
  id: ID!
  code: String
  name: String
  description: String
  overview: String
  creditHour: Int
}

type Chapter {
  id: ID!
  created_at: Date!
  updated_at: Date
  title: String!
  sequenceNumber: Int!
  course: Course!
  subChapters: [SubChapter]!
  documents: [CourseDocument]
}

input CreateChapterInput {
  title: String!
  sequenceNumber: Int!
  courseId: ID!
}

input UpdateChapterInput {
  id: ID!
  title: String
  sequenceNumber: Int
}

type SubChapter {
  id: ID!
  created_at: Date!
  updated_at: Date
  title: String!
  sequenceNumber: Int!
  chapter: Chapter!
}

input CreateSubChapterInput {
  title: String!
  sequenceNumber: Int!
  chapterId: ID!
}

input UpdateSubChapterInput {
  id: ID!
  title: String
  sequenceNumber: Int
}

type CourseDocument {
  id: ID!
  created_at: Date!
  updated_at: Date
  documentType: String!
  documentDisplayName: String!
  storedFileName: String!
  course: Course 
  assignmentDefinition: AssignmentDefinition
  assignmentSubmission: AssignmentSubmission
  chapter: Chapter
}

input CreateCourseDocumentInput {
  documentType: String!
  documentDisplayName: String!
  fileUpload: Upload!
  courseId: ID 
  chapterId: ID
}

input UpdateCourseDocumentInput {
  id: ID!
  documentType: String
  documentDisplayName: String
  fileUpload: Upload
}

type Query {
  courses: [Course]!
  course(id: ID!): Course
}

type Mutation {
  createCourse(createCourseInput: CreateCourseInput!): Course!
  updateCourse(updateCourseInput: UpdateCourseInput!): Course!
  removeCourse(id: ID!): Boolean!

  assignStudentToCourse(courseId: ID!, studentId: ID!): Boolean!
  assignTeacherToCourse(courseId: ID!, teacherId: ID!): Boolean!
  assignClassToCourse(courseId: ID!, classId: ID!): Boolean!
  assignClassesToCourses(
    coursesIds: UUIDArrayDto!
    classesIds: UUIDArrayDto!
  ): Boolean!
  assignCourseToDepartment(courseId: ID!, departmentId: ID!): Boolean!
  assignOwnerToCourse(courseId: ID!, ownerId: ID!): Boolean!

  unassignStudentFromCourse(courseId: ID!, studentId: ID!): Boolean!
  unassignTeacherFromCourse(courseId: ID!, teacherId: ID!): Boolean!
  unassignClassFromCourse(courseId: ID!, classId: ID!): Boolean!
  unassignClassesFromCourses(
    coursesIds: UUIDArrayDto!
    classesIds: UUIDArrayDto!
  ): Boolean!
  unassignCourseFromDepartment(courseId: ID!, departmentId: ID!): Boolean!
  unassignOwnerFromCourse(courseId: ID!, ownerId: ID!): Boolean

  createChapter(createChapterInput: CreateChapterInput): Chapter!
  updateChapter(updateChapterInput: UpdateChapterInput): Chapter!
  removeChapter(id: ID!): Boolean!

  createSubChapter(createSubChapterInput: CreateSubChapterInput): SubChapter!
  updateSubChapter(updateSubChapterInput: UpdateSubChapterInput): SubChapter!
  removeSubChapter(id: ID!): Boolean!

  createCourseDocument(
    createCourseDocumentInput: CreateCourseDocumentInput
  ): CourseDocument!
  updateCourseDocument(
    updateCourseDocumentInput: UpdateCourseDocumentInput
  ): CourseDocument!
  removeCourseDocument(id: ID!): Boolean!
}
