type Quiz {
  id: ID!
  title: String!
  description: String
  start: Date!
  end: Date!
  created_at: Date!
  duration: Int!
  sections: [QuizSection]
}

input CreateQuizInput {
  title: String!
  description: String
  start: Date!
  end: Date!
  duration: Int!
  sections: [CreateQuizSectionInput]!
}

input CreateQuizSectionInput {
  type: QuizSectionType!
  description: String
  questions: [CreateQuestionInput]!
  number: Int!
}

enum QuizSectionType {
  OBJECTIVE
  SUBJECTIVE
}

type QuizSection {
  id: ID!
  description: String
  sectionType: String
  number: Int!
  quiz: Quiz!
  questions: [Question]!
}

input CreateSubQuestionInput {
  number: Int!
  answer: String!
}

input CreateChoiceInput {
  key: String!
  text: String!
}

input CreateQuestionInput {
  type: QuestionType!
  text: String!
  number: Int!
  answer: String
  subQuestions: [CreateSubQuestionInput]
  choices: [CreateChoiceInput]
}

enum QuestionType {
  MULTIPLE_CHOICE
  TRUE_FALSE
  CLOZE
  ESSAY
}

type Question {
  id: ID!
  text: String!
  number: Int!
  questionType: QuestionType
}

enum AnswerTrueFalse {
  TRUE
  FALSE
}
type TrueFalse {
  id: ID!
  text: String!
  number: Int!
  questionType: QuestionType!
  answer: AnswerTrueFalse!
}

type MultipleChoice {
  id: ID!
  text: String!
  number: Int!
  questionType: QuestionType!
  choices: [Choice]!
  answer: String!
}

type Cloze {
  id: ID!
  text: String!
  number: Int!
  questionType: QuestionType!
  subQuestions: [SubQuestion]!
}

type Essay {
  id: ID!
  text: String!
  number: Int!
  questionType: QuestionType!
  answer: String!
}

type Choice {
  id: ID!
  key: String!
  text: String!
  question: MultipleChoice
}

type SubQuestion {
  id: ID!
  number: Int!
  answer: String!
  question: Cloze!
}

type Mutation {
  createQuiz(input: CreateQuizInput): Quiz!
}

type Query {
  quiz(id: ID!): Quiz
  quizzes: [Quiz]
  quizSections: [QuizSection]
}
